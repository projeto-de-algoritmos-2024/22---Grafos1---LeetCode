function minMalwareSpread(graph: number[][], initial: number[]): number {
    const n = graph.length;

    function simulateInfection(graph: number[][], infected: Set<number>): Set<number> {
        const infectNodes = new Set<number>(infected);
        const queue: number[] = [...infected];
        const vd = new Set<number>(infected);

        while (queue.length > 0) {
            const node = queue.shift()!;
            for (let i = 0; i < n; i++) {
                if (graph[node][i] === 1 && !vd.has(i)) {
                    vd.add(i);
                    queue.push(i);
                    infectNodes.add(i);
                }
            }
        }

        return infectNodes;
    }

    let initInfected = new Set<number>(initial);
    let infectedAll = simulateInfection(graph, initInfected);

    let minSpread = n + 1;
    let bestNode = -1;

    for (const nodeToRemove of initial) {
        const newInitial = new Set<number>(initial);
        newInitial.delete(nodeToRemove);

        const infectedAfterRemoval = simulateInfection(graph, newInitial);

        const infectedSize = infectedAfterRemoval.size;
        
        if (infectedSize < minSpread) {
            minSpread = infectedSize;
            bestNode = nodeToRemove;
        } else if (infectedSize === minSpread && nodeToRemove < bestNode) {
            bestNode = nodeToRemove;
        }
    }

    return bestNode;
}